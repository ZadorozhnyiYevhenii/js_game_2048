{"version":3,"sources":["scripts/main.js"],"names":["board","button","document","querySelector","winMessage","loseMessage","startMessage","gameScore","gameField","size","score","leftMove","arrowDown","arrowUp","arrowRight","arrowLeft","isEmptyCells","some","row","includes","placeCells","randomCol","Math","floor","random","randomRow","digit","setSells","gameLoosed","classList","remove","add","i","j","currentCell","rows","cells","num","innerText","value","replace","startGame","move","newRow","deleteEmptyCells","length","push","filter","copyBoard","clone","map","slice","isBoardSame","board1","board2","slideLeft","previousBoard","k","slideUp","column","newColumn","slideDown","c","reverse","b","slideRight","x","addEventListener","el","allowedArrowKeys","preventDefault","code"],"mappings":"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","file":"main.5a3b8378.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nconst button = document.querySelector('.button');\nconst winMessage = document.querySelector('.message_win');\nconst loseMessage = document.querySelector('.message_lose');\nconst startMessage = document.querySelector('.message_start');\nconst gameScore = document.querySelector('.game_score');\nconst gameField = document.querySelector('.game_field');\n\nconst size = 4;\nlet score = 0;\nlet board;\nlet leftMove = true;\nconst arrowDown = 'ArrowDown';\nconst arrowUp = 'ArrowUp';\nconst arrowRight = 'ArrowRight';\nconst arrowLeft = 'ArrowLeft';\n\nbutton.addEventListener('click', () => {\n  button.classList.replace('start', 'restart');\n  button.innerText = 'Restart';\n  startMessage.classList.add('hidden');\n  loseMessage.classList.add('hidden');\n  winMessage.classList.add('hidden');\n\n  startGame();\n});\n\nfunction isEmptyCells() {\n  return board.some(row => row.includes(0));\n}\n\nfunction placeCells() {\n  if (leftMove) {\n    while (isEmptyCells()) {\n      const randomCol = Math.floor(Math.random() * size);\n      const randomRow = Math.floor(Math.random() * size);\n\n      if (board[randomRow][randomCol] === 0) {\n        const digit = Math.random() < 0.9 ? 2 : 4;\n\n        board[randomRow][randomCol] = digit;\n        setSells();\n        break;\n      }\n    }\n\n    leftMove = false;\n  } else if (!isEmptyCells() && gameLoosed()) {\n    loseMessage.classList.remove('hidden');\n    winMessage.classList.add('hidden');\n  }\n\n  leftMove = true;\n}\n\nfunction gameLoosed() {\n  if (isEmptyCells()) {\n    return false;\n  }\n\n  for (let i = 0; i < size; i++) {\n    for (let j = 0; j < size - 1; j++) {\n      if (board[i][j] === board[i][j + 1]) {\n        return false;\n      }\n    }\n  }\n\n  for (let i = 0; i < size - 1; i++) {\n    for (let j = 0; j < size; j++) {\n      if (board[i][j] === board[i + 1][j]) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction setSells() {\n  for (let i = 0; i < size; i++) {\n    for (let j = 0; j < size; j++) {\n      const currentCell = gameField.rows[i].cells[j];\n      const num = board[i][j];\n\n      currentCell.innerText = '';\n      currentCell.classList.value = '';\n      currentCell.classList.add('field_cell');\n\n      if (num > 0) {\n        currentCell.innerText = num;\n        currentCell.classList.add(`field_cell--${num}`);\n      }\n\n      if (num === 2048) {\n        winMessage.classList.remove('hidden');\n        button.classList.replace('restart', 'start');\n      }\n    }\n  }\n\n  if (gameLoosed()) {\n    loseMessage.classList.remove('hidden');\n    winMessage.classList.add('hidden');\n  }\n}\n\nfunction startGame() {\n  board = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  score = 0;\n  gameScore.innerText = score;\n\n  setSells();\n  placeCells();\n  placeCells();\n  leftMove = true;\n}\n\nfunction move(row) {\n  let newRow = deleteEmptyCells(row);\n\n  for (let i = 0; i < newRow.length - 1; i++) {\n    if (newRow[i] === newRow[i + 1]) {\n      newRow[i] *= 2;\n      newRow[i + 1] = 0;\n      score += newRow[i];\n\n      gameScore.innerText = score;\n    }\n  }\n\n  newRow = deleteEmptyCells(newRow);\n\n  while (newRow.length < size) {\n    newRow.push(0);\n  }\n\n  return newRow;\n}\n\nfunction deleteEmptyCells(row) {\n  return row.filter(num => num !== 0);\n}\n\nfunction copyBoard(clone) {\n  return clone.map(row => row.slice());\n}\n\nfunction isBoardSame(board1, board2) {\n  for (let i = 0; i < size; i++) {\n    for (let j = 0; j < size; j++) {\n      if (board1[i][j] !== board2[i][j]) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction slideLeft() {\n  const previousBoard = copyBoard(board);\n\n  for (let k = 0; k < size; k++) {\n    board[k] = move(board[k]);\n  }\n\n  leftMove = !isBoardSame(board, previousBoard);\n}\n\nfunction slideUp() {\n  const previousBoard = copyBoard(board);\n\n  for (let i = 0; i < size; i++) {\n    const column = [\n      board[0][i],\n      board[1][i],\n      board[2][i],\n      board[3][i],\n    ];\n    const newColumn = move(column);\n\n    for (let k = 0; k < size; k++) {\n      board[k][i] = newColumn[k];\n    }\n  }\n\n  leftMove = !isBoardSame(board, previousBoard);\n}\n\nfunction slideDown() {\n  const previousBoard = copyBoard(board);\n\n  for (let c = 0; c < size; c++) {\n    const column = [\n      board[0][c],\n      board[1][c],\n      board[2][c],\n      board[3][c],\n    ].reverse();\n    const newColumn = move(column).reverse();\n\n    for (let b = 0; b < size; b++) {\n      board[b][c] = newColumn[b];\n    }\n  }\n\n  leftMove = !isBoardSame(board, previousBoard);\n}\n\nfunction slideRight() {\n  const previousBoard = copyBoard(board);\n\n  for (let x = 0; x < size; x++) {\n    board[x] = move(board[x].reverse()).reverse();\n  }\n\n  leftMove = !isBoardSame(board, previousBoard);\n}\n\ndocument.addEventListener('keydown', (el) => {\n  el.preventDefault();\n\n  const allowedArrowKeys = [arrowLeft, arrowRight, arrowUp, arrowDown];\n\n  if (allowedArrowKeys.includes(el.code)) {\n    switch (el.code) {\n      case arrowLeft:\n        slideLeft();\n        break;\n\n      case arrowRight:\n        slideRight();\n        break;\n\n      case arrowUp:\n        slideUp();\n        break;\n\n      case arrowDown:\n        slideDown();\n        break;\n    }\n\n    placeCells();\n    setSells();\n  }\n});\n"]}